name: Build and Deploy with Docker

on:
  push:
    branches: [ master ]
    paths:
      - 'next-app/**'
      - '!**/*.md'
      - '!.github/workflows/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_PORT: 3000
  DOCKER_BUILD_CONTEXT: ./next-app
  DOCKERFILE_PATH: ./next-app/Dockerfile
  NODE_VERSION: '20.11.1'

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-tag-main: ${{ steps.get-main-tag.outputs.main-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=Next.js application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: |
            NODE_ENV=production
            NODE_VERSION=${{ env.NODE_VERSION }}
          platforms: linux/amd64
          provenance: false
          sbom: false

      - name: Get main image tag
        id: get-main-tag
        run: |
          # Get the first tag from the metadata output
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "main-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Using image: ${IMAGE_TAG}"

  # Deploy to production with manual approval
  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production  # This requires manual approval
    concurrency: 
      group: production-deployment
      cancel-in-progress: false  # Don't cancel production deployments

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Frontend Azure Web App exists
        id: check-fe-app-exists
        continue-on-error: true
        uses: azure/CLI@v2
        with:
          azcliversion: 2.53.0
          inlineScript: |
            if az webapp show --name ${{ secrets.AZURE_WEBAPP_NAME_FE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
              echo "fe-exists=true" >> $GITHUB_OUTPUT
            else
              echo "fe-exists=false" >> $GITHUB_OUTPUT
            fi

      - name: Check if Backend Azure Web App exists
        id: check-be-app-exists
        continue-on-error: true
        uses: azure/CLI@v2
        with:
          azcliversion: 2.53.0
          inlineScript: |
            if az webapp show --name ${{ secrets.AZURE_WEBAPP_NAME_BE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
              echo "be-exists=true" >> $GITHUB_OUTPUT
            else
              echo "be-exists=false" >> $GITHUB_OUTPUT
            fi

      - name: Deploy to Azure Web App for Frontend
        if: steps.check-fe-app-exists.outputs.fe-exists == 'true'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_FE }}
          slot-name: 'production'
          images: '${{ needs.build-and-push.outputs.image-tag-main }}'

      - name: Configure App Settings for Frontend
        if: steps.check-fe-app-exists.outputs.fe-exists == 'true'
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_FE }}
          mask-inputs: true
          app-settings-json: |
            [
              {
                "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                "value": "false"
              },
              {
                "name": "WEBSITES_PORT",
                "value": "${{ env.CONTAINER_PORT }}"
              },
              {
                "name": "NEXT_PUBLIC_API_URL",
                "value": "https://${{ secrets.AZURE_WEBAPP_NAME_BE }}.azurewebsites.net"
              },
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "NEXT_TELEMETRY_DISABLED",
                "value": "1"
              }
            ]

      - name: Deploy to Azure Web App for Backend
        if: steps.check-be-app-exists.outputs.be-exists == 'true'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_BE }}
          slot-name: 'production'
          images: '${{ needs.build-and-push.outputs.image-tag-main }}'

      - name: Configure App Settings for Backend
        if: steps.check-be-app-exists.outputs.be-exists == 'true'
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_BE }}
          mask-inputs: true
          app-settings-json: |
            [
              {
                "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                "value": "false"
              },
              {
                "name": "WEBSITES_PORT",
                "value": "${{ env.CONTAINER_PORT }}"
              },
              {
                "name": "DATABASE_URL",
                "value": "${{ secrets.DATABASE_URL }}"
              },
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "NEXT_TELEMETRY_DISABLED",
                "value": "1"
              }
            ]

      - name: Run Health Check
        run: |
          echo "üîç Running post-deployment health checks..."
          
          # Check Frontend Health
          if [ "${{ steps.check-fe-app-exists.outputs.fe-exists }}" == "true" ]; then
            echo "Checking frontend health..."
            curl -f https://${{ secrets.AZURE_WEBAPP_NAME_FE }}.azurewebsites.net/api/health || exit 1
          fi
          
          # Check Backend Health  
          if [ "${{ steps.check-be-app-exists.outputs.be-exists }}" == "true" ]; then
            echo "Checking backend health..."
            curl -f https://${{ secrets.AZURE_WEBAPP_NAME_BE }}.azurewebsites.net/api/health || exit 1
          fi
          
          echo "‚úÖ All health checks passed!"

      - name: Restart Frontend Web App
        if: steps.check-fe-app-exists.outputs.fe-exists == 'true'
        uses: azure/CLI@v2
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME_FE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      - name: Restart Backend Web App
        if: steps.check-be-app-exists.outputs.be-exists == 'true'
        uses: azure/CLI@v2
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME_BE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      - name: Deployment Summary
        run: |
          echo "üöÄ **Production Deployment Completed Successfully!**"
          echo ""
          echo "**Deployed Services:**"
          if [ "${{ steps.check-fe-app-exists.outputs.fe-exists }}" == "true" ]; then
            echo "- Frontend: https://${{ secrets.AZURE_WEBAPP_NAME_FE }}.azurewebsites.net"
          fi
          if [ "${{ steps.check-be-app-exists.outputs.be-exists }}" == "true" ]; then
            echo "- Backend: https://${{ secrets.AZURE_WEBAPP_NAME_BE }}.azurewebsites.net"
          fi
          echo ""
          echo "**Image:** ${{ needs.build-and-push.outputs.image-tag-main }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Deployed by:** ${{ github.actor }}"