name: Build and Deploy with Docker

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '!.github/workflows/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_PORT: 3000
  DOCKER_BUILD_CONTEXT: .
  DOCKERFILE_PATH: ./Dockerfile

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:master
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./next-app
          file: ./next-app/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
          platforms: linux/amd64
          provenance: false
          load: true
          no-cache: false
          pull: true

  deploy:
    name: Deploy to Azure Web Apps
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App for Frontend
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME_FE || 'your-fe-app-name' }}
          slot-name: 'production'
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          configuration-file: './azure-app-service-config.json'
          startup-command: 'npm start'

      - name: Configure App Settings for Frontend
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME_FE || 'your-fe-app-name' }}
          app-settings-json: |
            [
              {
                "name": "NEXT_PUBLIC_API_URL",
                "value": "https://${{ vars.AZURE_WEBAPP_NAME_BE || 'your-be-app-name' }}.azurewebsites.net"
              },
              {
                "name": "NODE_ENV",
                "value": "production"
              }
            ]

      - name: Deploy to Azure Web App for Backend
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME_BE || 'your-be-app-name' }}
          slot-name: 'production'
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          configuration-file: './azure-app-service-config.json'
          startup-command: 'npm run start:backend'

      - name: Configure App Settings for Backend
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME_BE || 'your-be-app-name' }}
          app-settings-json: |
            [
              {
                "name": "DATABASE_URL",
                "value": "${{ secrets.DATABASE_URL }}"
              },
              {
                "name": "NODE_ENV",
                "value": "production"
              }
            ]
