name: Build and Deploy with Docker

on:
  push:
    branches: [ master ]
    paths:
      - 'next-app/**'
      - '.github/workflows/docker-deploy.yml'
      - '!**/*.md'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_PORT: 3000
  DOCKER_BUILD_CONTEXT: ./next-app
  DOCKERFILE_PATH: ./next-app/Dockerfile
  NODE_VERSION: '20.11.1'

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-tag-main: ${{ steps.get-main-tag.outputs.main-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.DOCKER_BUILD_CONTEXT }}/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=Next.js application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: |
            NODE_ENV=production
            NODE_VERSION=${{ env.NODE_VERSION }}
          platforms: linux/amd64
          provenance: false
          sbom: false

      - name: Get main image tag
        id: get-main-tag
        run: |
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "main-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Using image: ${IMAGE_TAG}"

  deploy:
    name: Deploy to Azure
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Switch to Azure official login action
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false

      - name: Verify Web Apps Exist
        uses: azure/cli@v1
        with:
          inlineScript: |
            if ! az webapp show --name ${{ secrets.AZURE_WEBAPP_NAME_FE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
              echo "Frontend web app ${{ secrets.AZURE_WEBAPP_NAME_FE }} does not exist in resource group ${{ secrets.AZURE_RESOURCE_GROUP }}."
              exit 1
            fi
            if ! az webapp show --name ${{ secrets.AZURE_WEBAPP_NAME_BE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
              echo "Backend web app ${{ secrets.AZURE_WEBAPP_NAME_BE }} does not exist in resource group ${{ secrets.AZURE_RESOURCE_GROUP }}."
              exit 1
            fi
            echo "Both web apps exist."

      - name: Deploy to Azure Web App for Frontend
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_FE }}
          slot-name: 'production'
          images: '${{ needs.build-and-push.outputs.image-tag-main }}'

      - name: Configure App Settings for Frontend
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp config appsettings set --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_WEBAPP_NAME_FE }} --settings \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
              WEBSITES_PORT=${{ env.CONTAINER_PORT }} \
              NEXT_PUBLIC_API_URL=https://${{ secrets.AZURE_WEBAPP_NAME_BE }}.azurewebsites.net \
              NODE_ENV=production \
              NEXT_TELEMETRY_DISABLED=1 \
              WEBSITE_CONTAINER_START_TIME_LIMIT=600 \
              WEBSITES_CONTAINER_START_TIME_LIMIT=600

      - name: Deploy to Azure Web App for Backend
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_BE }}
          slot-name: 'production'
          images: '${{ needs.build-and-push.outputs.image-tag-main }}'

      - name: Configure App Settings for Backend
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp config appsettings set --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_WEBAPP_NAME_BE }} --settings \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
              WEBSITES_PORT=${{ env.CONTAINER_PORT }} \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              NODE_ENV=production \
              NEXT_TELEMETRY_DISABLED=1 \
              WEBSITE_CONTAINER_START_TIME_LIMIT=600 \
              WEBSITES_CONTAINER_START_TIME_LIMIT=600

      - name: Wait for services to start
        run: |
          echo "üïê Waiting 45 seconds for services to start up..."
          sleep 45

      - name: Run Health Check with Retries
        run: |
          echo "üîç Running post-deployment health checks..."
          
          # Function to check endpoint with retries
          check_endpoint() {
            local url=$1
            local max_attempts=5
            local wait_seconds=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: Checking $url"
              if curl -s -f "$url" > /dev/null; then
                echo "‚úÖ Health check passed for $url"
                return 0
              else
                echo "‚ùå Health check failed for $url, retrying in $wait_seconds seconds..."
                sleep $wait_seconds
                attempt=$((attempt + 1))
              fi
            done
            
            echo "‚ùå Health check failed after $max_attempts attempts for $url"
            return 1
          }
          
          # Check frontend health
          check_endpoint "https://${{ secrets.AZURE_WEBAPP_NAME_FE }}.azurewebsites.net/api/health" || exit 1
          
          # Check backend health
          check_endpoint "https://${{ secrets.AZURE_WEBAPP_NAME_BE }}.azurewebsites.net/api/health" || exit 1
          
          echo "‚úÖ All health checks passed!"

      - name: Restart Frontend Web App
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Restarting frontend web app..."
            az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME_FE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      - name: Restart Backend Web App
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Restarting backend web app..."
            az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME_BE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      - name: Deployment Summary
        run: |
          echo "üöÄ **Deployment Completed Successfully!**"
          echo ""
          echo "**Deployed Services:**"
          echo "- Frontend: https://${{ secrets.AZURE_WEBAPP_NAME_FE }}.azurewebsites.net"
          echo "- Backend: https://${{ secrets.AZURE_WEBAPP_NAME_BE }}.azurewebsites.net"
          echo ""
          echo "**Image:** ${{ needs.build-and-push.outputs.image-tag-main }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Deployed by:** ${{ github.actor }}"
